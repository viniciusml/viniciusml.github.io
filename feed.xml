<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://vinileal.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vinileal.com/" rel="alternate" type="text/html" /><updated>2020-04-26T19:02:42+02:00</updated><id>https://vinileal.com/feed.xml</id><title type="html">Vini Leal</title><subtitle>I am an iOS app developer with experience developing, testing, and deploying iPhone apps. In addition to publishing 2 apps to the App Store, I was awarded a WWDC 2019 scholarship.</subtitle><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><entry><title type="html">Swift Initializers</title><link href="https://vinileal.com/initialization/basics/swift-initializers/" rel="alternate" type="text/html" title="Swift Initializers" /><published>2020-03-20T00:00:00+01:00</published><updated>2020-03-20T00:00:00+01:00</updated><id>https://vinileal.com/initialization/basics/swift-initializers</id><content type="html" xml:base="https://vinileal.com/initialization/basics/swift-initializers/">&lt;p&gt;Have you ever stopped to think about why you do what you do? I think it happens with all of us, at different levels, of course. In iOS development it can happen too. You write some code, just for the sake of writing, and then ask yourself: &lt;strong&gt;why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s what used to happen regarding &lt;em&gt;initializers&lt;/em&gt; for me. I would write only because I know I &lt;em&gt;had to&lt;/em&gt;, or because the compiler told me to do so. So I decided to do a bit of research, in order to understand a bit better about them. I will share my findings in this article.&lt;/p&gt;

&lt;p&gt;So, going straight to the point. According to Apple docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initialization is the process of preparing an instance of a class, structure, or enumeration for use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are methods that can be called to create a new instance of a type. They ensure the new instances are ready to be used for the first time.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;p&gt;It’s possible to set a value of a stored property within an initializer, or by assigning a default value.&lt;/p&gt;

&lt;p&gt;Let’s say we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Meal&lt;/code&gt; class, for example. A meal is composed by carbohydrate (abbreviated to carb), fat and protein. We can declare those properties, but they do not have a default value. Which means that we need to provide a proper initialization to our class.&lt;/p&gt;

&lt;p&gt;So we declare the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; that takes as parameters carb, fat and protein, and within the method we set the received values to our stored properties.&lt;/p&gt;

&lt;p&gt;Here’s how the code looks like:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Meal%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520carb%253A%2520Carb%250A%2520%2520%2520%2520let%2520fat%253A%2520Fat%250A%2520%2520%2520%2520let%2520protein%253A%2520Protein%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520init(carb%253A%2520Carb%252C%2520fat%253A%2520Fat%252C%2520protein%253A%2520Protein)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.carb%2520%253D%2520carb%250A%2520%2520%2520%2520%2520%2520%2520%2520self.fat%2520%253D%2520fat%250A%2520%2520%2520%2520%2520%2520%2520%2520self.protein%2520%253D%2520protein%250A%2520%2520%2520%2520%257D%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:373px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Now we are making sure that every time an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Meal&lt;/code&gt; is created, it should require an initializer with those properties.&lt;/p&gt;

&lt;p&gt;We can have more than one initializer for the same type. And it’s worth mentioning that they have no function names to differentiate them, so what makes them different are their parameters.&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=%2520%2520%2520%2520let%2520lunch%2520%253D%2520Meal(carb%253A%2520carb%252C%2520fat%253A%2520fat%252C%2520protein%253A%2520protein)%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520noCarbLunch%2520%253D%2520Meal(fat%253A%2520fat%252C%2520protein%253A%2520protein)&quot; style=&quot;transform:scale(1.0); width:800px; height:180px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;designated-initializers-and-convenience-initializers&quot;&gt;Designated Initializers and Convenience Initializers&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;designated&lt;/strong&gt; and &lt;strong&gt;convenience&lt;/strong&gt; initializers are designed to ensure all properties of a class receive a value, including any properties inherited from its superclass.&lt;/p&gt;

&lt;p&gt;Designated initializers are the main initializers of a class. They fully initialize all the properties needed and call a superclass initializer to continue the initialization process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every class must have at least one designated initializer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It could be a &lt;strong&gt;Default Initializer&lt;/strong&gt;, provided by swift when the class or structure provides default values for all its properties and does not provide an explicit initializer , like this:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520FruitSalad%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520var%2520apple%2520%253D%25202%250A%2520%2520%2520%2520var%2520orange%2520%253D%25201%250A%2520%2520%2520%2520var%2520pear%2520%253D%25202%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:273px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Or it could be an &lt;strong&gt;Automatically Inherited Initializer&lt;/strong&gt;, which happens in two scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A subclass has no designated initializers.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Cake%2520%257B%250A%250A%2520%2520let%2520eggs%253A%2520Int%250A%2520%2520let%2520flour%253A%2520Int%250A%2520%2520let%2520sugar%253A%2520Int%250A%250A%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Int%252C%2520sugar%253A%2520Int)%2520%257B%250A%2520%2520%2520%2520%2520%2520self.eggs%2520%253D%2520eggs%250A%2520%2520%2520%2520%2520%2520self.flour%2520%253D%2520flour%250A%2520%2520%2520%2520%2520%2520self.sugar%2520%253D%2520sugar%250A%2520%2520%257D%250A%257D%250A%250Aclass%2520DeliciousCake%253A%2520Cake%2520%257B%257D%250A%250Alet%2520myCake%2520%253D%2520DeliciousCake(egg%253A%25203%252C%2520flour%253A%2520300%252C%2520sugar%253A%2520200)&quot; style=&quot;transform:scale(1.0); width:800px; height:403px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;A subclass implements all of their superclass initializers, either via the first rule, or by providing a custom implementation as part of its definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=%2520%2520class%2520BirthdayCake%253A%2520Cake%2520%257B%250A%250A%2520%2520%2520%2520let%2520icingSugar%253A%2520Int%250A%2520%2520%2520%2520let%2520creamCheese%253A%2520Int%250A%2520%2520%2520%2520%2520%2520%250A%2520%2520%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Int%252C%2520sugar%253A%2520Int%252C%2520icingSugar%253A%2520Int%252C%2520creamCheese%253A%2520Int)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.creamCheese%2520%253D%2520creamCheese%250A%2520%2520%2520%2520%2520%2520%2520%2520self.icingSugar%2520%253D%2520icingSugar%250A%2520%2520%2520%2520%2520%2520%2520%2520super.init(eggs%253A%2520eggs%252C%2520flour%253A%2520flour%252C%2520sugar%253A%2520sugar)%250A%2520%2520%2520%2520%257D%250A%2520%2520%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:373px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Convenience initializers, on the other hand, are the secondary initializers. They are not required, unless your class needs it, and they &lt;em&gt;must&lt;/em&gt; call designated initializers, either from the same class or from its superclass.. They can do it using default values, or attributing new values. Also, they can be created in a class to support a specific use case.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at another example using our Cake class. When defining its properties, we could create a convenience initializers, in case we wanted a default value for one of the properties (in this case we want to set a default value for the sugar property, so our cake doesn’t end up too sweet). Then, we might end up with a code similar to this:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Cake%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520eggs%253A%2520Int%250A%2520%2520%2520%2520let%2520flour%253A%2520Double%250A%2520%2520%2520%2520let%2520sugar%253A%2520Double%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Double%252C%2520sugar%253A%2520Double)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.eggs%2520%253D%2520eggs%250A%2520%2520%2520%2520%2520%2520%2520%2520self.flour%2520%253D%2520flour%250A%2520%2520%2520%2520%2520%2520%2520%2520self.sugar%2520%253D%2520sugar%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520convenience%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Double)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.init(eggs%253A%2520eggs%252C%2520flour%253A%2520flour%252C%2520sugar%253A%2520150)%250A%2520%2520%2520%2520%257D%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:400px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Then, we can instantiate our cake using both initialisers, according to our needs.&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=let%2520cake%2520%253D%2520Cake(eggs%253A%25202%252C%2520flour%253A%2520200)%250Alet%2520sweeterCake%2520%253D%2520Cake(eggs%253A%25202%252C%2520flour%253A%2520250%252C%2520sugar%253A%2520300)&quot; style=&quot;transform:scale(1.0); width:800px; height:173px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This article showed the basics about swift initializers and a few ways in which they can be used. Of course, it’s such a huge topic and there’s much to cover and a lot more that we can do with them, but hopefully this will give you an idea about the subject, as it also helped me to understand it better.&lt;/p&gt;

&lt;p&gt;If you want to know more, I will leave a few useful articles linked here, as well as Apple’s official documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID222&quot; class=&quot;notice--info&quot;&gt;Initialization - The Swift Programming Language (Swift 5.1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swiftbysundell.com/articles/initializers-in-swift/&quot; class=&quot;notice--info&quot;&gt;Initializers in Swift - Swift by Sundell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/1220-swift-tutorial-initialization-in-depth-part-1-2&quot; class=&quot;notice--info&quot;&gt;Swift Tutorial: Initialization In Depth, Part 1/2&lt;/a&gt;&lt;/p&gt;</content><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><category term="intitializers" /><category term="basics" /><summary type="html">Have you ever stopped to think about why you do what you do? I think it happens with all of us, at different levels, of course. In iOS development it can happen too. You write some code, just for the sake of writing, and then ask yourself: why?</summary></entry></feed>