<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://vinileal.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vinileal.com/" rel="alternate" type="text/html" /><updated>2020-04-28T18:30:03+02:00</updated><id>https://vinileal.com/feed.xml</id><title type="html">Vini Leal</title><subtitle>I am an iOS app developer with experience developing, testing, and deploying iPhone apps. In addition to publishing 2 apps to the App Store, I was awarded a WWDC 2019 scholarship.</subtitle><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><entry><title type="html">Test Driving UIPageViewController implementation</title><link href="https://vinileal.com/tutorial/tdd/tdd-uipageviewcontroller/" rel="alternate" type="text/html" title="Test Driving UIPageViewController implementation" /><published>2020-04-04T00:00:00+02:00</published><updated>2020-04-04T00:00:00+02:00</updated><id>https://vinileal.com/tutorial/tdd/tdd-uipageviewcontroller</id><content type="html" xml:base="https://vinileal.com/tutorial/tdd/tdd-uipageviewcontroller/">&lt;p&gt;A UIPageViewController is a very popular element in iOS Projects. It’s commonly seen in onboarding screens, but it has a ton of other uses.&lt;/p&gt;

&lt;p&gt;Me and my friend &lt;a href=&quot;https://www.linkedin.com/in/mauro-marques-89910913b/&quot;&gt;Mauro Marques&lt;/a&gt; are using one for the onboarding screen of our app Hira, and while I was developing the beautiful screens desgined by him, I decided to register the proccess of implementing it using a &lt;strong&gt;Test Driven Development&lt;/strong&gt; approach.&lt;/p&gt;

&lt;p&gt;Just like the name suggests, the entire development is driven by tests. The cycle consists of four steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a test that is going to fail - (Red)&lt;/li&gt;
  &lt;li&gt;Make the test pass - (Green)&lt;/li&gt;
  &lt;li&gt;Refactor the code&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll begin with an empty project, with an unit test target. I am not going to use storyboards, so I’ll just set the basic configuration to my project by deleting the storyboard. In case you need some help, there’s a quick video, in which Sean Allen demonstrates how to do it &lt;a href=&quot;https://www.youtube.com/watch?v=Htn4h51BQsk&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, off to our test driven development. The first and simplest assertion we can make is that the PageViewController is initialised with no controllers (pages).&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;UIPageViewController&lt;/strong&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;viewControllers: Array&amp;lt;UIViewController&amp;gt;&lt;/code&gt; property, we can assert that this property is empty.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/22294a14ce4913124f3beddabba00b6f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Soon enough, the compiler warns us, because we still don’t have a PageViewController. This means we are in the red state (tests not passing or code not compiling), which means we can write production code.&lt;/p&gt;

&lt;p&gt;Let’s satisfy the compiler by adding the simplest piece of code.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/3067b05ab3e314d0858a9caf1deaa8be.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The errors are gone, and when we run our tests they pass, because by default this property is empty.&lt;/p&gt;

&lt;p&gt;Since we don’t have anything to refactor, let’s move on to the next test. According to my use case, I need the &lt;code class=&quot;highlighter-rouge&quot;&gt;.transitionStyle&lt;/code&gt; to be of .&lt;code class=&quot;highlighter-rouge&quot;&gt;scroll&lt;/code&gt; type. So, let’s test it. Add the following code to PageViewControllerTests.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/b44e1f515abf431cf008cba3d8b2a74a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If we run the tests now, they will not pass, because we still need to set this property. Add the following code to PageViewController.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/34e108a0f76435e209b5ec0aaaf18004.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We are using the initialiser to set the property. If we run the tests they will pass.&lt;/p&gt;

&lt;p&gt;Alright, moving on with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.navigationOrientation&lt;/code&gt;. In this case I’ll need it &lt;code class=&quot;highlighter-rouge&quot;&gt;.horizontal&lt;/code&gt;. Add the following code to PageViewControllerTests.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/a373c29f7ba0e0ce8a23a072c7132743.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If we run it now, it won’t pass, because in the initialiser we added previously was setting the property to &lt;code class=&quot;highlighter-rouge&quot;&gt;.vertical&lt;/code&gt;. So let’s change it to &lt;code class=&quot;highlighter-rouge&quot;&gt;.horizontal&lt;/code&gt;. Now the tests are passing.&lt;/p&gt;

&lt;p&gt;As a refactoring measure, we can create a helper method in PageViewControllerTests in order to create the SUT, or the &lt;em&gt;system under test&lt;/em&gt;. By using a helper method, we concentrate the SUT generation to one single place, and if we need to change or add something in the future, we just need to do it in that single place.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/9fab826abdf8db3c38b940de0366c6db.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now, replace &lt;code class=&quot;highlighter-rouge&quot;&gt;PageViewController()&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;makeSUT()&lt;/code&gt; in the previous tests.&lt;/p&gt;

&lt;p&gt;Moving on, we need to assert that when the view loads, the method &lt;code class=&quot;highlighter-rouge&quot;&gt;setViewControllers(_:direction:animated:completion:)&lt;/code&gt; is set with the initial view controller. Add this code to PageViewControllerTests&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/ccb865bf41079d5f53776572a7d11269.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we are testing that &lt;strong&gt;given&lt;/strong&gt; at least one controller, &lt;strong&gt;when&lt;/strong&gt; the view is loaded, the array of viewControllers is equal to the first item of this array.&lt;/p&gt;

&lt;p&gt;The code will not compile because we need to make some changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;makeSUT()&lt;/code&gt; method. Replace the existing method by this following one:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/29a4769d69d4410e6efd25e1e4e8942b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we are passing the controllers to be used as pages into the PageViewController initialiser.&lt;/p&gt;

&lt;p&gt;So, we also need to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; in PageViewController to:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/bb74df4e68d284065e6d8b8965a22836.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Also, we need to declare the property:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/1cd0ec383bb5be11bfbfa41254159ab5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now the code compiles, but the tests are not passing. And that is because we did not implement the method yet. So, add this code to PageViewController.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/0cbcd0d9fcdc041f0d98514303753f4e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here, in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; we check if there’s a first item in the pages array. If so, we call &lt;code class=&quot;highlighter-rouge&quot;&gt;setViewControllers(_:direction:animated:completion:)&lt;/code&gt; with it. Let’s run the tests, and they pass!&lt;/p&gt;

&lt;p&gt;We can make some refactoring to make our code easier to read, so let’s do it. Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;requiredInit()&lt;/code&gt; by this code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/fe8ef01445abaae85275debcb7a8df38.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We simplified it a bit using a convenience &lt;a href=&quot;http://vinileal.com/initialization/basics/swift-initializers/&quot;&gt;initialiser&lt;/a&gt;. Now, moving on, let’s test the dataSource.&lt;/p&gt;

&lt;p&gt;We need to make sure that when the user swipes right, the next view controller is called and presented. There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewDataSource&lt;/code&gt; method that handles this, called &lt;code class=&quot;highlighter-rouge&quot;&gt;pageViewController(_:viewControllerAfter:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s add the following test:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/90bdad7c7dc4688a86f9babe36c3dd54.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So, given two controllers, when our pageViewController is swiped (which triggers the data source method), we expect that the controller resulting from the &lt;code class=&quot;highlighter-rouge&quot;&gt;pageViewController(_:viewControllerAfter:)&lt;/code&gt; controller1 is the controller2.&lt;/p&gt;

&lt;p&gt;The tests will not compile yet, because we didn’t implement the dataSource in our production side.&lt;/p&gt;

&lt;p&gt;Let’s add the &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource = self&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; in PageViewController class.&lt;/p&gt;

&lt;p&gt;Now we can make an extension to conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt;, like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/9727c7f2bfac7d3ed836f1fd321ea2d9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The simplest thing to make the tests pass is to return the second item in the array. But it won’t cover all cases, and let’s see why by adding the next test.&lt;/p&gt;

&lt;p&gt;Add this to PageViewControllerTests:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/b6a6a6462c81451e3d6b6623c28039b5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So it’s basic the same setup, but this time we are adding one more controller, and making sure that when &lt;code class=&quot;highlighter-rouge&quot;&gt;pageViewController(_:viewControllerAfter:)&lt;/code&gt; is triggered two times in a row, we get the third controller. The test fails because we hardcoded a value in our production side. Let’s fix this!&lt;/p&gt;

&lt;p&gt;Add the following code to &lt;code class=&quot;highlighter-rouge&quot;&gt;PageViewController.pageViewController(_:viewControllerAfter:)&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/394718563e164eeb069f96bfc97f70ce.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we are getting the index of current the view controller, adding one to it and return the controller for the new index. Cool, if we run the tests, they pass. Can you spot something to refactor?&lt;/p&gt;

&lt;p&gt;Yes, let’s do it. We are going to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; extension to the same file as PageViewControllerTests, with the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/28d673da52277f6cf6da495e9f105606.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This way, replace occurrences of &lt;code class=&quot;highlighter-rouge&quot;&gt;sut.dataSource?.pageViewController(sut, viewControllerAfter: controller1)&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;sut.controllerAfter(controller1)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, we covered the situation of getting the next index, but we are still missing a scenario. When the maximum number of pages is reached, what should happen?&lt;/p&gt;

&lt;p&gt;According to my use case, when the last controller is reached, if the user swipes right, nothing should happen, so let’s test it.&lt;/p&gt;

&lt;p&gt;Add this to PageViewControllerTests class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/c7b9e5a9ac0ad4964839f8fb6db87b75.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So we are asserting that when the maximum number of pages is reached, if an attempt to swipe is made, the method returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, otherwise we could have a runtime &lt;em&gt;index out of range error.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By running the tests, we see that this one doesn’t pass. But to make it pass its simple, we add the following code just before the return in &lt;code class=&quot;highlighter-rouge&quot;&gt;pageViewController(_:viewControllerAfter:)&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/fb7a4f6fddb1d5c78678c5ee518c3b32.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Alright, tests are passing again. Moving on!&lt;/p&gt;

&lt;p&gt;We are going to test the opposite scenario now, which is the swipe left in this case. We’ll start by adding this test:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/a5acebf87244fb9a7789a0bd5b2fab05.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And let’s also add the extension for the controllerBefore helper method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/aadb7f285a87f0c1e6ced28a046891e4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So, when the page controller is displaying the first page, if a left swipe is attempted, the method should return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. If we run, it passes, because of the hardcoded &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; we returned when we implemented the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;Let’s move on to the next test.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/fd081fce83a95f784045d1966328f31d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It’s pretty much the same situation we tested with &lt;code class=&quot;highlighter-rouge&quot;&gt;pageViewController(_:viewControllerAfter:)&lt;/code&gt;, but this time, we are expecting to have the previous controller. If we run the tests, this one fails, so let’s implement our code.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;PageViewController.pageViewController(_:viewControllerBefore:)&lt;/code&gt;, replace the return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; by the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/5b8692b1e8d32e9b329d3cb355b2f5ac.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Again, we get the index of current controller, subtract one, check if it’s not smaller then zero, and return the corresponding controller to the index. Let’s run the tests and see that they pass!&lt;/p&gt;

&lt;p&gt;Now, just to make sure we have the correct behaviour, let’s add the following test:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/183dac213e14d8d026f2227267b646b9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So, if we are in the third controller, and perform swipe left twice, we should get the first controller, correct? Yes, and our tests are showing us that!&lt;/p&gt;

&lt;p&gt;Now we tested the basic structure, we’ll move on to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt;. We need a page control, and we can get it for ‘free’.&lt;/p&gt;

&lt;h3 id=&quot;apples-documentation-says&quot;&gt;Apple’s documentation says:&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If both of the methods in ‘Supporting a Page Indicator’ are implemented and the page view controller’s transition style is UIPageViewController.TransitionStyle.scroll, a page indicator is visible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right, our transition style is &lt;code class=&quot;highlighter-rouge&quot;&gt;.scroll&lt;/code&gt;, so we need to implement the methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;presentationCount(for:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;presentationIndex(for:)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s test that we are setting the correct presentation count.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/76ce953b0e0d44d37bb08cbfa0abf8ef.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So when we initialise the PageViewController with a certain number of pages, we expect the &lt;code class=&quot;highlighter-rouge&quot;&gt;presentationCount&lt;/code&gt; to be equal to the number of pages. And we check that by calling a dataSource method &lt;code class=&quot;highlighter-rouge&quot;&gt;presentationCount(for:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we run it, it fails. Because we didn’t implement it yet. So let’s fix this by adding it to our &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; extension:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/8dcc9009ebd0535fece594bdcba6ac1a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We are returning the number of items in pages array, because we want the number of indicators in &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; to be the same as the number of pages. We run the tests, and they pass. Nice!&lt;/p&gt;

&lt;p&gt;Now, the other required method for setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;presentationIndex(for:)&lt;/code&gt;. Let’s add the following test:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/cdd0bb02ace23b92401b116e20e15e5d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now we expect that when we initialise PageViewController, that &lt;code class=&quot;highlighter-rouge&quot;&gt;presentationIndex&lt;/code&gt; is set to zero, i.e. the first page. We run the tests and this one fails, because we don’t have that method yet. Add this to the dataSource extension:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/8a0b19c78eceb5f14ca251691d763894.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So, when we run the tests, they pass. Great!&lt;/p&gt;

&lt;p&gt;We added a hardcoded ‘0’ there, but it may be better to replace it by a variable, just in case we may need to use set a value in the future. Go on and declare the variable at the top of the file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/a5e5bacde7ecf3eeab546234e42d7754.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And replace the ‘0’ by &lt;code class=&quot;highlighter-rouge&quot;&gt;pageControlIndex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Great, we implemented the tests, they are passing, now it’s time to see our pageViewController in action. Add the following method to your SceneDelegate class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/f9988a9a47e74e59c36405aac9b1940a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And add this to &lt;code class=&quot;highlighter-rouge&quot;&gt;scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/viniciusml/da3f717fdff81f0edd2bd3f45ef1b75d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Since we are not using storyboards, this code prepares the window, and set’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;rootViewController&lt;/code&gt; to it. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;rootViewController&lt;/code&gt;, in this case, is our PageViewController, with 6 pages, each one with a different background color.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;command + R&lt;/strong&gt; and let’s see it in action!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/uipagecontroller-example.gif&quot; alt=&quot;&quot; class=&quot;full&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very nice, isn’t it? Now that the behaviour is covered, it’s just a matter of setting a nice UI and some cool animations and deliver a nice page control.&lt;/p&gt;

&lt;p&gt;If you want you can check the full code &lt;a href=&quot;https://github.com/viniciusml/Articles-Vinileal.com/tree/master/PageViewController&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was a glimpse of TDD. It’s a really powerful methodology to write maintainable and reliable code.&lt;/p&gt;

&lt;p&gt;Thanks for reading, if you have any questions leave it in the comments below!&lt;/p&gt;</content><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><category term="unit tests" /><category term="tdd" /><category term="UIPageViewController" /><category term="UIKit" /><summary type="html">In this article, I'll show you a way to implement an UIPageViewController using a Test Driven Development approach.</summary></entry><entry><title type="html">Code Reviews</title><link href="https://vinileal.com/productivity/basics/code-reviews/" rel="alternate" type="text/html" title="Code Reviews" /><published>2020-03-27T00:00:00+01:00</published><updated>2020-03-27T00:00:00+01:00</updated><id>https://vinileal.com/productivity/basics/code-reviews</id><content type="html" xml:base="https://vinileal.com/productivity/basics/code-reviews/">&lt;p&gt;&lt;strong&gt;How can you improve your team’s productivity with code reviews?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few things in life that you only truly see the importance after experiencing, and code reviews are definitely one of those. By talking to my colleagues who apply it frequently in their workflow I could see that it improves a lot the efficiency of the team, but at the same time, talking with the colleagues who had never used it before (including me) it’s hard to identify the value of this tool.&lt;/p&gt;

&lt;p&gt;In a &lt;strong&gt;code review,&lt;/strong&gt; basically, after a developer finishes writing a new piece of code (it can be a new feature, a bug fix, anything), another developer checks the code and covers some questions that may vary according to the company’s standards. A few examples are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can the logic of the code be improved? Does it cover all cases proposed?&lt;/li&gt;
  &lt;li&gt;Are all requirements implemented?&lt;/li&gt;
  &lt;li&gt;Does the new code conform with the company’s guidelines?&lt;/li&gt;
  &lt;li&gt;Are the tests enough for the new code or do they need to be modified?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, clearly there are benefits, and lots of them. So it might be good giving it a try and evaluate if it suits the team’s needs and if it fits their style style.&lt;/p&gt;

&lt;h2 id=&quot;how-to-begin&quot;&gt;How to begin&lt;/h2&gt;

&lt;p&gt;The first step, in my opinion, should be proposing it to the team. In this moment, the benefits of this practice can be explained to the team, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It facilitates knowledge across everyone in the team, which means that all members know what’s going on with the code base.&lt;/li&gt;
  &lt;li&gt;Helps to establish or reinforce coding standards.&lt;/li&gt;
  &lt;li&gt;It’s a wonderful tool to onboard new developers. By having their code reviewed, new developers can learn quickly about the guidelines, and easily adapt in conversations regarding the code. Also, by reviewing veteran’s, new developers can contribute with a fresh pair of eyes, which often helps a team to tackle a problem in a different way.&lt;/li&gt;
  &lt;li&gt;Code reviews produce software with fewer defects.&lt;/li&gt;
  &lt;li&gt;Ensures that necessary documentation is being written.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-time-issue&quot;&gt;The time issue&lt;/h2&gt;

&lt;p&gt;Some of the most popular counterargument used by developers new to code reviews are the time spent to do it. Indeed, it’s an additional step into the development process, which means it takes some time. But it’s not time wasted and there are some ways to make sure it’s optimised.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Review before merging. Sounds a bit obvious, but it can help discover mistakes and improve the code before it reaches the development branch.&lt;/li&gt;
  &lt;li&gt;Set an appropriate timeframe to perform the reviews. Eg.: no more then one hour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when it comes to introducing this practice into the development process, there are is a key aspect that may help: &lt;strong&gt;starting slowly&lt;/strong&gt;. Sometimes, working in a fast paced environment, means thats one needs to be very thoughtful in this part, because the introduction of a new step might be slow in the beginning.&lt;/p&gt;

&lt;p&gt;It can be useful to begin by implementing pull requests after small tasks were done, just to get the hang of it, and after some time evolve into reviewing bigger tasks until the point where the whole team is comfortable with it, in which reviews can be performed for every new code written for production.&lt;/p&gt;

&lt;h2 id=&quot;a-few-tips-to-take-the-most-out-of-code-reviews&quot;&gt;A few tips to take the most out of code reviews&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Begin the review with a fresh mind and without any expectations on what the code should be like.&lt;/li&gt;
  &lt;li&gt;Review your own code before submitting it to review. It may sound as basic advice, but you may find some things to improve.&lt;/li&gt;
  &lt;li&gt;If there are special places where you want feedback, make them explicit.&lt;/li&gt;
  &lt;li&gt;In case there’s something not very clear, ask questions to the author.&lt;/li&gt;
  &lt;li&gt;Explain why there’s room for improvement in the code reviewed and if possible, propose a solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;veredict&quot;&gt;Veredict&lt;/h2&gt;

&lt;p&gt;Code reviews are relatively simple to include in the workflow, and can greatly improve software quality.&lt;/p&gt;

&lt;p&gt;Depending on your team, it can good fit, and although it may bring some changes in the process, the benefits for sure outweigh the cost of adaptation.&lt;/p&gt;

&lt;p&gt;It is something that combines technical and non-technical skills, and, as most of things in life, the more you do it, the more you get better at it. It is super important to be open to feedback and being able to offer proper feedback as well.&lt;/p&gt;

&lt;p&gt;What are your thoughts on this? Do you do code reviews in your team?&lt;/p&gt;</content><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><category term="productivity" /><category term="basics" /><summary type="html">How can you improve your team’s productivity with code reviews?</summary></entry><entry><title type="html">Swift Initializers</title><link href="https://vinileal.com/initialization/basics/swift-initializers/" rel="alternate" type="text/html" title="Swift Initializers" /><published>2020-03-20T00:00:00+01:00</published><updated>2020-03-20T00:00:00+01:00</updated><id>https://vinileal.com/initialization/basics/swift-initializers</id><content type="html" xml:base="https://vinileal.com/initialization/basics/swift-initializers/">&lt;p&gt;Have you ever stopped to think about why you do what you do? I think it happens with all of us, at different levels, of course. In iOS development it can happen too. You write some code, just for the sake of writing, and then ask yourself: &lt;strong&gt;why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s what used to happen regarding &lt;em&gt;initializers&lt;/em&gt; for me. I would write only because I know I &lt;em&gt;had to&lt;/em&gt;, or because the compiler told me to do so. So I decided to do a bit of research, in order to understand a bit better about them. I will share my findings in this article.&lt;/p&gt;

&lt;p&gt;So, going straight to the point. According to Apple docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initialization is the process of preparing an instance of a class, structure, or enumeration for use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are methods that can be called to create a new instance of a type. They ensure the new instances are ready to be used for the first time.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;p&gt;It’s possible to set a value of a stored property within an initializer, or by assigning a default value.&lt;/p&gt;

&lt;p&gt;Let’s say we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Meal&lt;/code&gt; class, for example. A meal is composed by carbohydrate (abbreviated to carb), fat and protein. We can declare those properties, but they do not have a default value. Which means that we need to provide a proper initialization to our class.&lt;/p&gt;

&lt;p&gt;So we declare the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; that takes as parameters carb, fat and protein, and within the method we set the received values to our stored properties.&lt;/p&gt;

&lt;p&gt;Here’s how the code looks like:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Meal%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520carb%253A%2520Carb%250A%2520%2520%2520%2520let%2520fat%253A%2520Fat%250A%2520%2520%2520%2520let%2520protein%253A%2520Protein%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520init(carb%253A%2520Carb%252C%2520fat%253A%2520Fat%252C%2520protein%253A%2520Protein)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.carb%2520%253D%2520carb%250A%2520%2520%2520%2520%2520%2520%2520%2520self.fat%2520%253D%2520fat%250A%2520%2520%2520%2520%2520%2520%2520%2520self.protein%2520%253D%2520protein%250A%2520%2520%2520%2520%257D%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:373px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Now we are making sure that every time an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Meal&lt;/code&gt; is created, it should require an initializer with those properties.&lt;/p&gt;

&lt;p&gt;We can have more than one initializer for the same type. And it’s worth mentioning that they have no function names to differentiate them, so what makes them different are their parameters.&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=%2520%2520%2520%2520let%2520lunch%2520%253D%2520Meal(carb%253A%2520carb%252C%2520fat%253A%2520fat%252C%2520protein%253A%2520protein)%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520noCarbLunch%2520%253D%2520Meal(fat%253A%2520fat%252C%2520protein%253A%2520protein)&quot; style=&quot;transform:scale(1.0); width:800px; height:180px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;designated-initializers-and-convenience-initializers&quot;&gt;Designated Initializers and Convenience Initializers&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;designated&lt;/strong&gt; and &lt;strong&gt;convenience&lt;/strong&gt; initializers are designed to ensure all properties of a class receive a value, including any properties inherited from its superclass.&lt;/p&gt;

&lt;p&gt;Designated initializers are the main initializers of a class. They fully initialize all the properties needed and call a superclass initializer to continue the initialization process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every class must have at least one designated initializer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It could be a &lt;strong&gt;Default Initializer&lt;/strong&gt;, provided by swift when the class or structure provides default values for all its properties and does not provide an explicit initializer , like this:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520FruitSalad%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520var%2520apple%2520%253D%25202%250A%2520%2520%2520%2520var%2520orange%2520%253D%25201%250A%2520%2520%2520%2520var%2520pear%2520%253D%25202%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:273px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Or it could be an &lt;strong&gt;Automatically Inherited Initializer&lt;/strong&gt;, which happens in two scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A subclass has no designated initializers.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Cake%2520%257B%250A%250A%2520%2520let%2520eggs%253A%2520Int%250A%2520%2520let%2520flour%253A%2520Int%250A%2520%2520let%2520sugar%253A%2520Int%250A%250A%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Int%252C%2520sugar%253A%2520Int)%2520%257B%250A%2520%2520%2520%2520%2520%2520self.eggs%2520%253D%2520eggs%250A%2520%2520%2520%2520%2520%2520self.flour%2520%253D%2520flour%250A%2520%2520%2520%2520%2520%2520self.sugar%2520%253D%2520sugar%250A%2520%2520%257D%250A%257D%250A%250Aclass%2520DeliciousCake%253A%2520Cake%2520%257B%257D%250A%250Alet%2520myCake%2520%253D%2520DeliciousCake(egg%253A%25203%252C%2520flour%253A%2520300%252C%2520sugar%253A%2520200)&quot; style=&quot;transform:scale(1.0); width:800px; height:403px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;A subclass implements all of their superclass initializers, either via the first rule, or by providing a custom implementation as part of its definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=%2520%2520class%2520BirthdayCake%253A%2520Cake%2520%257B%250A%250A%2520%2520%2520%2520let%2520icingSugar%253A%2520Int%250A%2520%2520%2520%2520let%2520creamCheese%253A%2520Int%250A%2520%2520%2520%2520%2520%2520%250A%2520%2520%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Int%252C%2520sugar%253A%2520Int%252C%2520icingSugar%253A%2520Int%252C%2520creamCheese%253A%2520Int)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.creamCheese%2520%253D%2520creamCheese%250A%2520%2520%2520%2520%2520%2520%2520%2520self.icingSugar%2520%253D%2520icingSugar%250A%2520%2520%2520%2520%2520%2520%2520%2520super.init(eggs%253A%2520eggs%252C%2520flour%253A%2520flour%252C%2520sugar%253A%2520sugar)%250A%2520%2520%2520%2520%257D%250A%2520%2520%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:373px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Convenience initializers, on the other hand, are the secondary initializers. They are not required, unless your class needs it, and they &lt;em&gt;must&lt;/em&gt; call designated initializers, either from the same class or from its superclass.. They can do it using default values, or attributing new values. Also, they can be created in a class to support a specific use case.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at another example using our Cake class. When defining its properties, we could create a convenience initializers, in case we wanted a default value for one of the properties (in this case we want to set a default value for the sugar property, so our cake doesn’t end up too sweet). Then, we might end up with a code similar to this:&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=class%2520Cake%2520%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520let%2520eggs%253A%2520Int%250A%2520%2520%2520%2520let%2520flour%253A%2520Double%250A%2520%2520%2520%2520let%2520sugar%253A%2520Double%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Double%252C%2520sugar%253A%2520Double)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.eggs%2520%253D%2520eggs%250A%2520%2520%2520%2520%2520%2520%2520%2520self.flour%2520%253D%2520flour%250A%2520%2520%2520%2520%2520%2520%2520%2520self.sugar%2520%253D%2520sugar%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520convenience%2520init(eggs%253A%2520Int%252C%2520flour%253A%2520Double)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520self.init(eggs%253A%2520eggs%252C%2520flour%253A%2520flour%252C%2520sugar%253A%2520150)%250A%2520%2520%2520%2520%257D%250A%257D&quot; style=&quot;transform:scale(1.0); width:800px; height:400px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Then, we can instantiate our cake using both initialisers, according to our needs.&lt;/p&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba(0%2C146%2C202%2C0.85)&amp;amp;t=one-light&amp;amp;wt=none&amp;amp;l=swift&amp;amp;ds=true&amp;amp;dsyoff=41px&amp;amp;dsblur=100px&amp;amp;wc=false&amp;amp;wa=false&amp;amp;pv=45px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=let%2520cake%2520%253D%2520Cake(eggs%253A%25202%252C%2520flour%253A%2520200)%250Alet%2520sweeterCake%2520%253D%2520Cake(eggs%253A%25202%252C%2520flour%253A%2520250%252C%2520sugar%253A%2520300)&quot; style=&quot;transform:scale(1.0); width:800px; height:173px; border:0; overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This article showed the basics about swift initializers and a few ways in which they can be used. Of course, it’s such a huge topic and there’s much to cover and a lot more that we can do with them, but hopefully this will give you an idea about the subject, as it also helped me to understand it better.&lt;/p&gt;

&lt;p&gt;If you want to know more, I will leave a few useful articles linked here, as well as Apple’s official documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID222&quot; class=&quot;notice--info&quot;&gt;Initialization - The Swift Programming Language (Swift 5.1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swiftbysundell.com/articles/initializers-in-swift/&quot; class=&quot;notice--info&quot;&gt;Initializers in Swift - Swift by Sundell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/1220-swift-tutorial-initialization-in-depth-part-1-2&quot; class=&quot;notice--info&quot;&gt;Swift Tutorial: Initialization In Depth, Part 1/2&lt;/a&gt;&lt;/p&gt;</content><author><name>Vini Leal</name><email>viniciusmoreiraleal+blog@gmail.com</email></author><category term="intitializers" /><category term="basics" /><summary type="html">Initialization is the process of preparing an instance of a class, structure, or enumeration for use.</summary></entry></feed>